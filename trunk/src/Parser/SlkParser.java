package Parser;
// SlkParser.java - generated by the SLK parser generator 

import grupo3.plg.lexico.tablaSimbolos.TablaSimbolos;

public class SlkParser {

    private static short get_conditional_production(short symbol) {
        return (short) 0;
    }
    private static short[] Parse = {
        0, 0, 296, 24, 297, 229, 251, 297, 235, 250, 228, 228, 234, 229, 299, 229, 4, 229, 299, 55, 296, 5, 298, 291, 22, 299, 299, 240, 299, 241, 229, 229, 19, 299, 18, 9, 9, 297, 297, 241, 297, 241, 3, 1, 297, 2, 55, 21, 20, 299, 296, 296, 296, 296, 241, 241, 56, 291, 56, 290, 53, 56, 299, 298, 298, 298, 298, 298, 298, 298, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 56, 268, 53, 56, 92, 56, 56, 56, 56, 56, 78, 56, 56, 56, 56, 269, 56, 56, 81, 91, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 58, 42, 57, 42, 295, 57, 42, 81, 81, 294, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 68, 151, 152, 59, 237, 57, 57, 60, 57, 61, 6, 62, 57, 63, 64, 236, 65, 67, 154, 155, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 283, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 76, 74, 289, 231, 74, 44, 282, 43, 74, 248, 43, 230, 74, 231, 75, 231, 74, 74, 74, 37, 74, 249, 37, 232, 233, 74, 37, 7, 231, 231, 74, 77, 38, 74, 74, 74, 288, 74, 37, 74, 285, 74, 258, 284, 74, 169, 170, 171, 263, 74, 74, 263, 259, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 133, 133, 8, 262, 133, 10, 285, 285, 133, 285, 260, 109, 133, 285, 133, 94, 133, 132, 133, 108, 133, 108, 95, 308, 304, 133, 175, 273, 23, 261, 94, 133, 260, 133, 133, 133, 287, 133, 260, 133, 239, 133, 304, 305, 133, 25, 272, 26, 238, 133, 133, 131, 36, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 309, 39, 286, 287, 159, 304, 304, 304, 304, 145, 146, 147, 148, 149, 150, 260, 260, 260, 260, 260, 260, 260, 260, 260, 40, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 107, 41, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 45, 110, 14, 107, 13, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 16, 15, 110, 158, 158, 158, 158, 158, 158, 158, 158, 158, 46, 47, 48, 49, 107, 107, 107, 107, 160, 161, 162, 163, 164, 165, 166, 167, 168, 50, 51, 52, 110, 110, 110, 110, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 113, 54, 69, 80, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 116, 82, 113, 267, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 266, 279, 116, 279, 142, 143, 278, 278, 84, 279, 173, 279, 314, 279, 174, 144, 113, 113, 113, 113, 316, 318, 315, 85, 173, 86, 279, 279, 279, 173, 317, 319, 116, 116, 117, 118, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 119, 87, 293, 88, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 122, 89, 119, 106, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 172, 227, 128, 227, 292, 0, 226, 226, 0, 223, 0, 227, 0, 227, 0, 253, 119, 119, 253, 222, 0, 222, 0, 0, 0, 0, 227, 227, 227, 0, 0, 252, 126, 127, 222, 222, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 129, 129, 124, 124, 125, 125, 125, 125, 125, 125, 125, 125, 125, 123, 123, 123, 0, 0, 0, 0, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 134, 270, 275, 0, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 120, 313, 0, 120, 271, 0, 0, 120, 312, 0, 0, 120, 0, 270, 274, 120, 0, 120, 0, 120, 0, 0, 0, 0, 120, 135, 136, 137, 138, 139, 140, 141, 120, 120, 120, 0, 120, 0, 120, 0, 120, 0, 0, 120, 0, 313, 0, 0, 120, 120, 0, 0, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 114, 0, 244, 114, 245, 0, 245, 114, 34, 0, 0, 114, 0, 0, 245, 114, 245, 114, 0, 114, 0, 98, 0, 35, 114, 0, 33, 0, 0, 245, 245, 245, 114, 114, 114, 0, 114, 0, 114, 98, 114, 0, 0, 114, 0, 0, 0, 0, 115, 115, 0, 0, 114, 114, 114, 114, 114, 114, 114, 115, 303, 0, 0, 0, 303, 0, 0, 0, 303, 98, 98, 303, 303, 0, 303, 0, 0, 0, 0, 303, 34, 34, 34, 34, 34, 34, 34, 34, 34, 98, 98, 98, 98, 0, 0, 303, 0, 0, 0, 0, 0, 0, 98, 98, 98, 303, 303, 0, 303, 303, 303, 303, 303, 303, 303, 303, 303, 302, 302, 302, 302, 302, 302, 111, 0, 246, 111, 247, 0, 247, 111, 0, 0, 0, 112, 0, 0, 247, 111, 247, 111, 0, 111, 0, 0, 0, 0, 111, 0, 0, 0, 0, 247, 247, 247, 111, 111, 111, 0, 111, 0, 111, 0, 111, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 112, 112, 112, 112, 112, 112, 112, 208, 209, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 190, 191, 192, 193, 194, 195, 207, 301, 0, 27, 0, 301, 0, 0, 71, 301, 0, 71, 301, 301, 0, 301, 156, 0, 27, 0, 301, 27, 224, 28, 73, 29, 30, 225, 31, 0, 32, 264, 0, 265, 156, 265, 301, 72, 0, 0, 224, 71, 71, 265, 71, 265, 300, 300, 71, 301, 301, 301, 301, 301, 301, 301, 301, 300, 265, 265, 265, 0, 0, 0, 156, 156, 156, 156, 0, 156, 224, 224, 224, 224, 0, 27, 27, 27, 27, 27, 27, 27, 27, 27, 156, 156, 156, 156, 0, 276, 224, 224, 224, 224, 277, 310, 0, 156, 156, 156, 281, 0, 281, 224, 224, 224, 0, 276, 280, 0, 281, 0, 281, 310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 281, 281, 281, 0, 0, 0, 11, 0, 0, 0, 83, 0, 276, 276, 276, 276, 0, 0, 310, 310, 310, 310, 0, 311, 11, 0, 0, 0, 83, 0, 0, 0, 276, 276, 276, 276, 0, 0, 310, 310, 310, 310, 0, 0, 0, 276, 276, 276, 90, 0, 0, 310, 310, 310, 11, 11, 11, 11, 83, 83, 83, 83, 0, 0, 93, 0, 90, 0, 0, 0, 0, 0, 96, 0, 11, 11, 11, 11, 83, 83, 83, 83, 93, 0, 0, 0, 0, 11, 11, 11, 96, 83, 83, 83, 0, 0, 90, 90, 90, 90, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 93, 93, 93, 93, 90, 90, 90, 90, 96, 96, 96, 96, 0, 0, 97, 0, 0, 90, 90, 90, 93, 93, 93, 93, 0, 0, 0, 0, 96, 96, 96, 96, 157, 93, 93, 93, 0, 0, 0, 0, 0, 96, 96, 96, 97, 97, 97, 97, 255, 0, 157, 0, 0, 0, 0, 0, 0, 70, 70, 0, 0, 70, 257, 0, 97, 97, 97, 97, 0, 0, 255, 70, 0, 0, 70, 0, 254, 97, 97, 97, 157, 157, 157, 157, 257, 153, 0, 70, 70, 0, 256, 70, 70, 0, 70, 0, 0, 0, 70, 99, 157, 157, 157, 157, 0, 0, 0, 153, 0, 0, 0, 307, 0, 157, 157, 157, 0, 104, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 306, 257, 257, 257, 257, 257, 257, 257, 257, 257, 0, 0, 0, 0, 102, 103, 0, 0, 0, 0, 0, 0, 0, 0, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 105, 105, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 307, 307, 307, 307, 307, 307, 307, 307, 307, 12, 0, 12, 17, 0, 17, 243, 0, 242, 0, 12, 0, 12, 17, 0, 17, 242, 0, 242, 0, 0, 0, 0, 0, 0, 12, 12, 12, 17, 17, 17, 242, 242, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    private static int[] Parse_row = {0, 38, 11, 14, 166, 256, 296, 27, 295, 1138, 1434, 413, 1437, 19, 314, 2, 333, 347, 1010, 814, 334, 250, 348, 369, 386, 130, 238, 398, 425, 435, 426, 455, 442, 443, 453, 59, 505, 16, 55, 129, 510, 1300, 1013, 232, 95, 478, 101, 488, 1142, 509, 522, 522, 565, 565, 578, 1180, 80, 1196, 306, 1204, 1240, 827, 1343, 609, 408, 302, 424, 927, 508, 804, 524, 608, 738, 624, 299, 711, 494, 314, 92, 1329, 107, 1023, 1276, 371, 388, 197, 640, 545, 326, 115, 904, 13, 647, 1029, 639, 2, 234, 249, 2, 163, 335, 26, 1440, 808, 931, 233, 3, 653, 1292, 1306, 266, 310, 279, 1038, 522, 81, 725, 322, 726, 1096, 539, 1105, 210, 271, 334, 233, 20, 608, 93, 1, 8, 1003, 861, 324, 1355, 314, 1102, 732, 543, 551, 552, 0};
    private static short[] Conflict = {
        0
    };
    private static int[] Conflict_row = {0, 0};
    private static short[] Production = {0, 0, 2049, 2050, 0, 2049, 2051, 0, 2049, 2052, 0, 2050, 46, 257, 2058, 2053, 0, 2051, 46, 257, 258, 2140, 2054, 0, 2052, 2050, 259, 0, 2053, 2142, 59, 2141, 257, 260, 0, 2054, 2144, 2143, 59, 257, 260, 261, 0, 2055, 2146, 2136, 263, 2145, 0, 2056, 2134, 2147, 264, 0, 2057, 2107, 0, 2058, 258, 2085, 2060, 0, 2059, 2062, 0, 2059, 2149, 266, 0, 2059, 2078, 0, 2059, 59, 2081, 0, 2060, 2150, 0, 2061, 2062, 0, 2061, 2064, 0, 2061, 2078, 0, 2061, 2080, 0, 2061, 2084, 0, 2062, 2151, 267, 0, 2063, 2107, 61, 257, 0, 2064, 2152, 266, 0, 2065, 2066, 61, 257, 0, 2066, 2067, 0, 2066, 2070, 0, 2066, 2071, 0, 2066, 2072, 0, 2066, 2075, 0, 2066, 2076, 0, 2067, 2068, 0, 2067, 2069, 2131, 0, 2067, 93, 2107, 268, 2107, 91, 0, 2068, 41, 2134, 40, 0, 2069, 0, 2069, 93, 2107, 268, 2107, 91, 0, 2070, 2067, 270, 269, 0, 2071, 2066, 270, 2153, 2067, 271, 0, 2072, 258, 2073, 272, 0, 2073, 2154, 2074, 0, 2074, 0, 2074, 2066, 58, 2134, 0, 2075, 2066, 274, 273, 0, 2076, 2155, 275, 0, 2077, 2160, 41, 2159, 40, 0, 2078, 2161, 276, 0, 2079, 2066, 58, 2134, 0, 2080, 59, 257, 2058, 59, 2081, 0, 2081, 2162, 257, 275, 0, 2082, 2165, 41, 2164, 40, 0, 2083, 2127, 58, 2134, 2166, 0, 2084, 59, 257, 2058, 2169, 2168, 59, 2167, 257, 260, 0, 2085, 2170, 0, 2086, 2171, 2087, 0, 2087, 0, 2087, 2088, 0, 2087, 2093, 0, 2087, 2095, 0, 2087, 2097, 0, 2087, 2098, 0, 2087, 2099, 0, 2087, 2100, 0, 2087, 2101, 0, 2087, 2138, 0, 2087, 2102, 0, 2087, 278, 0, 2088, 2089, 257, 0, 2089, 2090, 2091, 0, 2090, 0, 2090, 2114, 279, 0, 2090, 2111, 0, 2091, 0, 2091, 2091, 93, 2112, 91, 0, 2091, 2091, 2092, 46, 0, 2091, 2091, 94, 0, 2092, 257, 0, 2092, 2138, 0, 2093, 258, 2094, 2086, 281, 2114, 280, 0, 2094, 2173, 2172, 0, 2095, 258, 2175, 2174, 2096, 270, 2114, 284, 0, 2096, 2086, 58, 2103, 0, 2097, 258, 2086, 286, 2114, 285, 0, 2098, 2114, 288, 2086, 287, 0, 2099, 258, 2086, 289, 0, 2100, 258, 2086, 286, 2176, 2114, 274, 2114, 279, 257, 290, 0, 2101, 258, 2086, 286, 2091, 257, 292, 0, 2102, 2177, 293, 0, 2103, 2104, 2105, 0, 2104, 0, 2104, 2104, 2105, 44, 0, 2105, 2106, 2107, 0, 2106, 0, 2106, 2107, 268, 0, 2107, 2178, 2108, 0, 2108, 2179, 2109, 2118, 0, 2109, 2180, 2110, 0, 2110, 257, 0, 2110, 2133, 0, 2110, 2128, 0, 2110, 294, 0, 2110, 295, 0, 2110, 41, 2107, 40, 0, 2110, 2110, 2126, 0, 2111, 41, 2181, 40, 0, 2112, 2113, 2114, 0, 2113, 0, 2113, 2113, 2114, 44, 0, 2114, 2115, 2116, 0, 2115, 0, 2115, 2116, 2123, 0, 2116, 2117, 2119, 2118, 0, 2117, 0, 2117, 2117, 2119, 2124, 0, 2118, 0, 2118, 43, 0, 2118, 45, 0, 2119, 2120, 2121, 0, 2120, 0, 2120, 2120, 2121, 2125, 0, 2121, 2122, 257, 0, 2121, 2133, 0, 2121, 2128, 0, 2121, 125, 2129, 123, 2132, 0, 2121, 294, 0, 2121, 295, 0, 2121, 41, 2114, 40, 0, 2121, 2121, 2126, 0, 2121, 2139, 0, 2122, 125, 2129, 123, 0, 2122, 2111, 0, 2122, 2091, 0, 2123, 61, 0, 2123, 296, 0, 2123, 35, 0, 2123, 60, 0, 2123, 297, 0, 2123, 62, 0, 2123, 298, 0, 2123, 299, 0, 2124, 43, 0, 2124, 45, 0, 2124, 300, 0, 2125, 42, 0, 2125, 47, 0, 2125, 301, 0, 2125, 302, 0, 2125, 38, 0, 2125, 303, 0, 2126, 304, 0, 2126, 126, 0, 2127, 2131, 2182, 0, 2128, 305, 0, 2128, 306, 0, 2129, 2184, 0, 2130, 2185, 2107, 0, 2131, 2132, 0, 2131, 257, 0, 2132, 307, 0, 2132, 308, 0, 2132, 309, 0, 2132, 310, 0, 2132, 311, 0, 2132, 312, 0, 2132, 313, 0, 2132, 314, 0, 2132, 315, 0, 2133, 316, 0, 2133, 317, 0, 2133, 318, 0, 2134, 2135, 257, 0, 2135, 0, 2135, 2135, 257, 44, 0, 2136, 257, 0, 2136, 2137, 0, 2137, 319, 0, 2137, 320, 0, 2137, 321, 0, 2137, 322, 0, 2137, 323, 0, 2137, 324, 0, 2137, 325, 0, 2137, 326, 0, 2137, 327, 0, 2137, 328, 0, 2137, 329, 0, 2137, 330, 0, 2137, 331, 0, 2138, 41, 2186, 2114, 40, 332, 0, 2138, 41, 2187, 2114, 40, 333, 0, 2138, 41, 2114, 44, 2114, 40, 334, 0, 2138, 41, 2114, 44, 2114, 40, 335, 0, 2138, 41, 2114, 40, 336, 0, 2138, 41, 2114, 40, 337, 0, 2138, 41, 2114, 40, 321, 0, 2138, 41, 2114, 44, 2114, 40, 322, 0, 2138, 41, 2114, 40, 323, 0, 2138, 41, 2114, 44, 2114, 40, 324, 0, 2138, 41, 2114, 40, 325, 0, 2138, 41, 2114, 40, 326, 0, 2138, 41, 2114, 40, 327, 0, 2138, 41, 2114, 40, 328, 0, 2138, 41, 2114, 40, 329, 0, 2138, 41, 2188, 2114, 44, 2114, 40, 330, 0, 2138, 331, 0, 2138, 338, 0, 2138, 41, 2114, 44, 2114, 40, 319, 0, 2138, 41, 2114, 44, 2114, 40, 320, 0, 2139, 41, 2114, 40, 339, 0, 2139, 41, 295, 40, 340, 0, 2139, 41, 2114, 40, 341, 0, 2139, 41, 2114, 40, 342, 0, 2139, 41, 2114, 40, 343, 0, 2139, 41, 2131, 40, 344, 0, 2139, 41, 2131, 40, 345, 0, 2139, 41, 2114, 40, 346, 0, 2139, 41, 2114, 40, 347, 0, 2139, 41, 2131, 40, 348, 0, 2139, 41, 2114, 40, 349, 0, 2139, 41, 2114, 44, 2131, 40, 350, 0, 2140, 2140, 2059, 0, 2140, 0, 2141, 2057, 0, 2141, 0, 2142, 2142, 59, 2055, 0, 2142, 0, 2143, 2143, 59, 2055, 0, 2143, 0, 2144, 59, 2056, 0, 2144, 0, 2145, 257, 262, 0, 2145, 0, 2146, 2146, 2136, 44, 0, 2146, 0, 2147, 265, 0, 2147, 0, 2148, 2066, 61, 0, 2148, 0, 2149, 2149, 59, 2148, 257, 0, 2149, 0, 2150, 2150, 2061, 0, 2150, 0, 2151, 2151, 59, 2063, 0, 2151, 0, 2152, 2152, 59, 2065, 0, 2152, 0, 2153, 2153, 2067, 44, 0, 2153, 0, 2154, 2154, 2074, 59, 0, 2154, 0, 2155, 2077, 0, 2155, 0, 2156, 276, 0, 2156, 0, 2157, 276, 0, 2157, 0, 2158, 2158, 2127, 2157, 44, 0, 2158, 0, 2159, 2158, 2127, 2156, 0, 2159, 0, 2160, 2131, 58, 0, 2160, 0, 2161, 2161, 59, 2079, 0, 2161, 0, 2162, 2082, 0, 2162, 0, 2163, 2163, 2083, 59, 0, 2163, 0, 2164, 2163, 2083, 0, 2164, 0, 2165, 2131, 58, 0, 2165, 0, 2166, 276, 0, 2166, 0, 2167, 2107, 0, 2167, 0, 2168, 2168, 59, 2055, 0, 2168, 0, 2169, 59, 2056, 0, 2169, 0, 2170, 2086, 277, 0, 2170, 0, 2171, 2171, 2087, 59, 0, 2171, 0, 2172, 2172, 2086, 281, 2114, 282, 0, 2172, 0, 2173, 2086, 283, 0, 2173, 0, 2174, 2174, 2096, 124, 0, 2174, 0, 2175, 2086, 283, 0, 2175, 0, 2176, 2107, 291, 0, 2176, 0, 2177, 2114, 0, 2177, 0, 2178, 2108, 2123, 0, 2178, 0, 2179, 2179, 2109, 2124, 0, 2179, 0, 2180, 2180, 2110, 2125, 0, 2180, 0, 2181, 2112, 0, 2181, 0, 2182, 270, 271, 0, 2182, 0, 2183, 2183, 2130, 44, 0, 2183, 0, 2184, 2183, 2130, 0, 2184, 0, 2185, 2107, 268, 0, 2185, 0, 2186, 2114, 44, 0, 2186, 0, 2187, 2114, 44, 0, 2187, 0, 2188, 2114, 44, 0, 2188, 0};
    private static int[] Production_row = {0, 1, 4, 7, 10, 16, 23, 27, 34, 42, 48, 53, 56, 61, 64, 68, 71, 75, 78, 81, 84, 87, 90, 93, 97, 102, 106, 111, 114, 117, 120, 123, 126, 129, 132, 136, 143, 148, 150, 157, 162, 169, 174, 178, 180, 185, 190, 194, 200, 204, 209, 216, 221, 227, 233, 244, 247, 251, 253, 256, 259, 262, 265, 268, 271, 274, 277, 280, 283, 286, 290, 294, 296, 300, 303, 305, 311, 316, 320, 323, 326, 334, 338, 347, 352, 359, 365, 370, 382, 390, 394, 398, 400, 405, 409, 411, 415, 419, 424, 428, 431, 434, 437, 440, 443, 448, 452, 457, 461, 463, 468, 472, 474, 478, 483, 485, 490, 492, 495, 498, 502, 504, 509, 513, 516, 519, 525, 528, 531, 536, 540, 543, 548, 551, 554, 557, 560, 563, 566, 569, 572, 575, 578, 581, 584, 587, 590, 593, 596, 599, 602, 605, 608, 611, 615, 618, 621, 624, 628, 631, 634, 637, 640, 643, 646, 649, 652, 655, 658, 661, 664, 667, 670, 674, 676, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 714, 717, 720, 723, 726, 733, 740, 748, 756, 762, 768, 774, 782, 788, 796, 802, 808, 814, 820, 826, 835, 838, 841, 849, 857, 863, 869, 875, 881, 887, 893, 899, 905, 911, 917, 923, 931, 935, 937, 940, 942, 947, 949, 954, 956, 960, 962, 966, 968, 973, 975, 978, 980, 984, 986, 992, 994, 998, 1000, 1005, 1007, 1012, 1014, 1019, 1021, 1026, 1028, 1031, 1033, 1036, 1038, 1041, 1043, 1049, 1051, 1056, 1058, 1062, 1064, 1069, 1071, 1074, 1076, 1081, 1083, 1087, 1089, 1093, 1095, 1098, 1100, 1103, 1105, 1110, 1112, 1116, 1118, 1122, 1124, 1129, 1131, 1138, 1140, 1144, 1146, 1151, 1153, 1157, 1159, 1163, 1165, 1168, 1170, 1174, 1176, 1181, 1183, 1188, 1190, 1193, 1195, 1199, 1201, 1206, 1208, 1212, 1214, 1218, 1220, 1224, 1226, 1230, 1232, 1236, 0};
    private static short[] Terminal_to_index = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 67, 0, 19, 20, 63, 51, 10, 52, 2, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 6, 57, 14, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 18, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 39, 54, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 17, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 58, 60, 61, 62, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117
    };
    private static final short END_OF_SLK_INPUT_ = 351;
    private static final short START_SYMBOL = 2049;

    public static short GetTerminalIndex(short token) {
        return (Terminal_to_index[token]);
    }

    private static short get_predicted_entry(int display,
            SlkToken tokens,
            SlkLog log,
            short production_number,
            short token,
            int scan_level,
            int depth) {
        return 0;
    }

    public TablaSimbolos parse(int display,
            SlkAction action,
            SlkToken tokens,
            SlkError error,
            SlkLog log,
            short start_symbol, TablaSimbolos tabla) {
        short rhs, lhs;
        short production_number, entry, symbol, token, new_token;
        int top, index, level;
        short[] stack = new short[512];
        boolean procedure = false, module = false, record = false;
        boolean primero = true;
        boolean primerIdent = true;
        boolean declaracion = false;
        boolean exportadas = false;
        String nomRecord = "";

        top = 511;
        stack[top] = 0;
        if (start_symbol == 0) {
            start_symbol = START_SYMBOL;
        }
        if (top > 0) {
            stack[--top] = start_symbol;
        } else {
            log.trace("SlkParse: stack overflow\n");
            return null;
        }
        token = tokens.get();
        if (token == 260) {
            declaracion = true;
        } else if (token == 277) {
            declaracion = false;
        } else if (token == 258) {
            tabla = cerrarAmbito(tabla);
        }
        if (declaracion) {

            if (token == 258) {
                tabla = cerrarAmbito(tabla);
            } else if (token == 264) {
                exportadas = true;
            } else if (token == 59) {
                exportadas = false;
            } else if (token == 260 && record == false) {
                module = true;

            } else if (token == 275) {
                procedure = true;
            } else if (token == 266) {
                record = true;
            } else if (token == 257 && record && primerIdent) {
                nomRecord = tokens.getLexema();
                primerIdent = false;
            } else if (token == 257 && module) {
                if (primero) {
                    tabla = new TablaSimbolos(tokens.getLexema(), null, null);
                    primero = false;
                } else {
                    TablaSimbolos tablaAux = tabla.insertarModulo(tokens.getLexema());
                    tablaAux.setModPadre(tabla);
                    tabla = tablaAux;
                    module = false;
                }
            } else if (token == 257 && !module && !procedure && !record) {

                tabla.insertarIdentificador(tokens.getLexema());
                if (exportadas) {
                    tabla.anadirVariableExportada(tokens.getLexema());
                }
            } else if (token == 257 && procedure) {
                TablaSimbolos tablaAux = tabla.insertarProcedimiento(tokens.getLexema());
                tablaAux.setModPadre(tabla);
                tabla = tablaAux;
                procedure = false;
            } else if (token == 272 && record) {
                TablaSimbolos tablaAux = tabla.insertarProcedimiento(nomRecord);
                tablaAux.setModPadre(tabla);
                tabla = tablaAux;
                record = false;
                primerIdent = true;
            }
        }
        new_token = token;
        if (display != 0) {
            log.trace("\n\n\t\tPARSE DERIVATION\n\n");
        }

        for (symbol = (stack[top] != 0 ? stack[top++] : (short) 0); symbol != 0;) {

            if (symbol >= START_SYMBOL) {                  // nonterminal symbol

                entry = 0;
                level = 1;
                production_number = get_conditional_production(symbol);
                if (production_number != 0) {
                    entry = get_predicted_entry(display, tokens, log,
                            production_number, token,
                            level, 1);
                }
                if (entry == 0) {
                    index = Parse_row[symbol - (START_SYMBOL - 1)];
                    index += Terminal_to_index[token];
                    entry = Parse[index];
                }
                while (entry < 0) {
                    index = Conflict_row[-entry];
                    index += Terminal_to_index[tokens.peek(level)];
                    entry = Conflict[index];
                    ++level;
                }
                if (entry != 0) {
                    index = Production_row[entry];
                    lhs = Production[ ++
                     index
                          ];
                            if ( lhs == symbol ) {                   // valid row for lhs
                 rhs = Production [++index];
                 for ( ;  rhs != 0; rhs = Production[++index]) {
                            if (top > 0) {
                                stack[--top] = rhs;
                            } else {
                                log.trace("SlkParse: stack overflow\n");
                                return null;
                            }
                        }
                        if (display != 0) {
                            log.trace_production(entry);
                        }
                    } else {                                 // lhs does not match
                        new_token = error.no_entry(symbol, token, level - 1);
                    }
                } else {                                       // no table entry
                    new_token = error.no_entry(symbol, token, level - 1);
                }

            } else if (symbol > 0) {                         // terminal symbol
                if (symbol == token) {
                    token = tokens.get();
                    if (token == 260 || token == 275) {
                        declaracion = true;
                    } else if (token == 277) {
                        declaracion = false;
                    } else if (token == 258) {
                        tabla = this.cerrarAmbito(tabla);
                    }
                    if (declaracion) {
                        if (token == 258) {
                            tabla = cerrarAmbito(tabla);
                        } else if (token == 264) {
                            exportadas = true;
                        } else if (token == 59) {
                            exportadas = false;
                        } else if (token == 260 && record == false) {
                            module = true;

                        } else if (token == 275) {
                            procedure = true;
                        } else if (token == 266) {
                            record = true;
                        } else if (token == 257 && record && primerIdent) {
                            nomRecord = tokens.getLexema();
                            primerIdent = false;
                        } else if (token == 257 && module) {
                            if (primero) {
                                tabla = new TablaSimbolos(tokens.getLexema(), null, null);
                                primero = false;
                                module = false;
                            } else {
                                TablaSimbolos tablaAux = tabla.insertarModulo(tokens.getLexema());
                                tablaAux.setModPadre(tabla);
                                tabla = tablaAux;
                                module = false;
                            }
                        } else if (token == 257 && !module && !procedure && !record) {
                            tabla.insertarIdentificador(tokens.getLexema());
                            if (exportadas) {
                                tabla.anadirVariableExportada(tokens.getLexema());
                            }
                        } else if (token == 257 && procedure) {
                            TablaSimbolos tablaAux = tabla.insertarProcedimiento(tokens.getLexema());
                            tablaAux.setModPadre(tabla);
                            tabla = tablaAux;
                            procedure = false;
                        } else if (token == 272 && record) {
                            TablaSimbolos tablaAux = tabla.insertarProcedimiento(nomRecord);
                            tablaAux.setModPadre(tabla);
                            tabla = tablaAux;
                            record = false;
                            primerIdent = true;
                        }
                    }
                    new_token = token;
                } else {                                       // token mismatch
                    new_token = error.mismatch(symbol, token);
                }

            } else {                                           // action symbol
                if (display != 0) {
                    log.trace_action(symbol);
                }
                action.execute(-symbol);
            }

            if (token != new_token) {
                if (new_token != 0) {
                    token = new_token;
                }
                if (token != END_OF_SLK_INPUT_) {
                    continue;                                  // try this token
                }
            }

            symbol = (stack[top] != 0 ? stack[top++] : (short) 0);
        }

        if (token != END_OF_SLK_INPUT_) {                    // input left over
            error.input_left();
        }
        return tabla;

    }

    private TablaSimbolos cerrarAmbito(TablaSimbolos tabla) {
        if (tabla.getModPadre() != null) {
            tabla.obtenerExportadas();
            return tabla.getModPadre();
        } else if (tabla.getContinente() != null) {
            return tabla.getContinente();
        }
        return tabla;
    }
};
